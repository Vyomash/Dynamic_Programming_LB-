class Solution {
public:
//Recursion approach
    int solveUsingRec(string a,string b,int i,int j){
        if(i>=a.length()){
            return 0;
        }
        if(j>=b.length()){
            return 0;
        }
        int ans=0;
        if(a[i]==b[j]){
            ans=1+solveUsingRec(a,b,i+1,j+1);
        }
        else{
            ans=0+max(solveUsingRec(a,b,i+1,j),solveUsingRec(a,b,i,j+1));
        }
        return ans;
    }


//Memoization approach
int solveUsingMem(string& a,string& b,int i,int j,vector<vector<int>>& dp){
        if(i>=a.length()){
            return 0;
        }
        if(j>=b.length()){
            return 0;
        }
        if(dp[i][j]!= -1){
            return dp[i][j];
        }
        int ans=0;
        if(a[i]==b[j]){
            ans=1+solveUsingMem(a,b,i+1,j+1,dp);
        }
        else{
            ans=0+max(solveUsingMem(a,b,i+1,j,dp),solveUsingMem(a,b,i,j+1,dp));
        }
        dp[i][j]=ans;
        return dp[i][j];
    }


//Tabulation approach
    int  solveUsingTab(string& a,string& b){
            vector<vector<int>> dp(a.length()+1,vector<int>(b.length()+1,0));
            for(int i=a.length()-1;i>=0;i--){
                for(int j=b.length()-1;j>=0;j--){
                        int ans=0;
                        if(a[i]==b[j]){
                            ans=1+dp[i+1][j+1];
                        }
                        else{
                            ans=0+max(dp[i+1][j],dp[i][j+1]);
                        }
                        dp[i][j]=ans;
                }
            }
        return dp[0][0];
    }


//Space Optimisation
int  solveUsingTabSO(string& a,string& b){
            //vector<vector<int>> dp(a.length()+1,vector<int>(b.length()+1,0));
            vector<int> next(a.length()+1,0);
            vector<int> curr(a.length()+1,0);
            
            for(int j=b.length()-1;j>=0;j--){
                for(int i=a.length()-1;i>=0;i--){
                        int ans=0;
                        if(a[i]==b[j]){
                            ans=1+next[i+1];
                        }
                        else{
                            ans=0+max(curr[i+1],next[i]);
                        }
                        curr[i]=ans;   //ans store kar liya curr ka ith index pa
                }
                next=curr;  //shifting
            }
        return next[0];
    }
    int longestCommonSubsequence(string text1, string text2) {
        //Method-4
        int i=0;
        int j=0;
        int ans=solveUsingTabSO(text1,text2);
        return ans;

        //Method-3
        // int i=0;
        // int j=0;
        // int ans=solveUsingTab(text1,text2);
        // return ans;


        //Method-2
        // int i=0;
        // int j=0;
        // vector<vector<int>> dp(text1.length()+1,vector<int>(text2.length()+1,-1));
        // int ans=solveUsingMem(text1,text2,i,j,dp);
        // return ans;

        //Method-1
        // int i=0;
        // int j=0;
        // int ans=solveUsingRec(text1,text2,i,j);
        //return ans;
    }
};
